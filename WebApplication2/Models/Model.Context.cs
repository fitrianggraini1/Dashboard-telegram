//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NamlosEntities1 : DbContext
    {
        public NamlosEntities1()
            : base("name=NamlosEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Absence_Account> Absence_Account { get; set; }
        public virtual DbSet<Absence_Response> Absence_Response { get; set; }
        public virtual DbSet<account> accounts { get; set; }
        public virtual DbSet<DY_Improvement> DY_Improvement { get; set; }
        public virtual DbSet<DY_pdf> DY_pdf { get; set; }
        public virtual DbSet<failed_jobs> failed_jobs { get; set; }
        public virtual DbSet<HAP_Testing_FourWeeks> HAP_Testing_FourWeeks { get; set; }
        public virtual DbSet<Inventory_Items> Inventory_Items { get; set; }
        public virtual DbSet<KB_Absent> KB_Absent { get; set; }
        public virtual DbSet<KB_Issue> KB_Issue { get; set; }
        public virtual DbSet<KB_Main> KB_Main { get; set; }
        public virtual DbSet<KF_Background> KF_Background { get; set; }
        public virtual DbSet<KF_Baseline> KF_Baseline { get; set; }
        public virtual DbSet<KF_Date> KF_Date { get; set; }
        public virtual DbSet<KF_Deliverable> KF_Deliverable { get; set; }
        public virtual DbSet<KF_Finding> KF_Finding { get; set; }
        public virtual DbSet<KF_Finding_Attach> KF_Finding_Attach { get; set; }
        public virtual DbSet<KF_Finding_Attach_After> KF_Finding_Attach_After { get; set; }
        public virtual DbSet<KF_Finding_Attach_Before> KF_Finding_Attach_Before { get; set; }
        public virtual DbSet<KF_Goals> KF_Goals { get; set; }
        public virtual DbSet<KF_Main> KF_Main { get; set; }
        public virtual DbSet<KF_Member> KF_Member { get; set; }
        public virtual DbSet<KF_Rplus> KF_Rplus { get; set; }
        public virtual DbSet<KF_Scope> KF_Scope { get; set; }
        public virtual DbSet<KF_Temp> KF_Temp { get; set; }
        public virtual DbSet<LMS_accounts> LMS_accounts { get; set; }
        public virtual DbSet<LMS_Linus> LMS_Linus { get; set; }
        public virtual DbSet<LMS_WindUser> LMS_WindUser { get; set; }
        public virtual DbSet<Lokator_Nest> Lokator_Nest { get; set; }
        public virtual DbSet<migration> migrations { get; set; }
        public virtual DbSet<MsForm_1> MsForm_1 { get; set; }
        public virtual DbSet<Nest_Toy> Nest_Toy { get; set; }
        public virtual DbSet<personal_access_tokens> personal_access_tokens { get; set; }
        public virtual DbSet<Recruitment_MsForm> Recruitment_MsForm { get; set; }
        public virtual DbSet<Register_Nest> Register_Nest { get; set; }
        public virtual DbSet<Robins_Account> Robins_Account { get; set; }
        public virtual DbSet<Robins_Booking> Robins_Booking { get; set; }
        public virtual DbSet<Robins_Integrated_Booking> Robins_Integrated_Booking { get; set; }
        public virtual DbSet<Robins_Integrated_Group> Robins_Integrated_Group { get; set; }
        public virtual DbSet<Robins_Integrated_Room> Robins_Integrated_Room { get; set; }
        public virtual DbSet<Robins_Room> Robins_Room { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<temp> temps { get; set; }
        public virtual DbSet<Testing> Testings { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<HC_Current_Copy> HC_Current_Copy { get; set; }
        public virtual DbSet<password_resets> password_resets { get; set; }
        public virtual DbSet<Pre_Kaizen_Form> Pre_Kaizen_Form { get; set; }
        public virtual DbSet<Rak_Nest> Rak_Nest { get; set; }
        public virtual DbSet<Robins_Room_Temp> Robins_Room_Temp { get; set; }
        public virtual DbSet<temp_pre_kz> temp_pre_kz { get; set; }
        public virtual DbSet<DY_View_DailyImp> DY_View_DailyImp { get; set; }
        public virtual DbSet<KB_View_Absent> KB_View_Absent { get; set; }
        public virtual DbSet<KB_View_Issue> KB_View_Issue { get; set; }
        public virtual DbSet<KB_View_List_1> KB_View_List_1 { get; set; }
        public virtual DbSet<KB_View_List_2> KB_View_List_2 { get; set; }
        public virtual DbSet<KB_View_ListMember_All> KB_View_ListMember_All { get; set; }
        public virtual DbSet<KB_View_Main_List> KB_View_Main_List { get; set; }
        public virtual DbSet<KF_View_Dashboard> KF_View_Dashboard { get; set; }
        public virtual DbSet<KF_VIEW_EMPLOYEE> KF_VIEW_EMPLOYEE { get; set; }
        public virtual DbSet<KF_View_Finding> KF_View_Finding { get; set; }
        public virtual DbSet<KF_View_KaizenAuthor> KF_View_KaizenAuthor { get; set; }
        public virtual DbSet<KF_View_ListKaizen> KF_View_ListKaizen { get; set; }
        public virtual DbSet<KF_View_ListKaizenAuthor> KF_View_ListKaizenAuthor { get; set; }
        public virtual DbSet<KF_View_ListMemberAll> KF_View_ListMemberAll { get; set; }
        public virtual DbSet<KF_View_Member_Last_check> KF_View_Member_Last_check { get; set; }
        public virtual DbSet<KF_View_MemberName> KF_View_MemberName { get; set; }
        public virtual DbSet<KF_View_RplusName> KF_View_RplusName { get; set; }
        public virtual DbSet<KF_View_RplusName2> KF_View_RplusName2 { get; set; }
        public virtual DbSet<KF_View_UpdateListKaizen> KF_View_UpdateListKaizen { get; set; }
        public virtual DbSet<LMS_employee> LMS_employee { get; set; }
        public virtual DbSet<LMS_user> LMS_user { get; set; }
        public virtual DbSet<LMS_View_WindUser> LMS_View_WindUser { get; set; }
        public virtual DbSet<Robins_View_Booking> Robins_View_Booking { get; set; }
        public virtual DbSet<View_1> View_1 { get; set; }
        public virtual DbSet<View_Absence_Response> View_Absence_Response { get; set; }
        public virtual DbSet<View_HC_Current> View_HC_Current { get; set; }
        public virtual DbSet<BOT_Lokator_Nest> BOT_Lokator_Nest { get; set; }
        public virtual DbSet<BOT_Register_Nest> BOT_Register_Nest { get; set; }
        public virtual DbSet<BOT_Toy_Nest> BOT_Toy_Nest { get; set; }
        public virtual DbSet<BOT_Rak_Nest> BOT_Rak_Nest { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
